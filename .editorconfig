################################################################################
#
# (c) American Software, Inc. All rights reserved.
#
# .editorconfig file for text files
#
# See https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options
# and https://editorconfig.org/ for more information.
#
################################################################################
#
# Teams will most likely want to review and consider whether to make changes
# to the following settings:
#
# * indent_size - size in spaces of each indentation
# * indent_style - whether to indent with tabs or spaces
# * file_header_template - Comment text to include at the top of each file
# * csharp_new_line_* - Multiple settings that specify whether braces go
#                       on same or new lines
################################################################################

# Stop search in this file so as not to pick up settings outside the repository
root=true


################################################################################
#
# C# and VB.Net rules
#
# Change the following to [*.*] to apply indentation and spacing standards
# to all text files, not just C# and VB files.
#
[*.{cs,vb}]
indent_size = 4
indent_style = space
insert_final_newline = true

[*.{cs,vb}]
#-------------------------------------------------------------------------------
#
# File header preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0073
#

# Require a copyright comment at the top of each file
file_header_template = (c) American Software, Inc. All rights reserved.


#-------------------------------------------------------------------------------
#
# this and Me preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009
#

# Warn when prefixing a field with this. or Me.
dotnet_style_qualification_for_field = false:warning

# Warn when prefixing a property with this. or Me.
dotnet_style_qualification_for_property = false:warning

# Warn when prefixing a method with this. or Me.
dotnet_style_qualification_for_method = false:warning

# Warn when prefixing an event with this. or Me.
dotnet_style_qualification_for_event = false:warning


#-------------------------------------------------------------------------------
#
# Use language keywords instead of framework type names for type references
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049
#

# Suggest use of language-specific keywords for types (int instead of Int32)
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

# Suggest use of language-specific keywords when accessing type members (int.MaxValue instead of Int32.MaxValue)
dotnet_style_predefined_type_for_member_access = true:suggestion


#-------------------------------------------------------------------------------
#
# Modifier preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/modifier-preferences
#

# Warn when missing accessibility modifiers except on public interface members
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning

# Suggest when possible readonly fields are not marked readonly
dotnet_style_readonly_field = true:suggestion


#-------------------------------------------------------------------------------
#
# Parentheses preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047-ide0048
#

# Suggest parentheses around arithmetic binary operators for clarity
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion

# Suggest parentheses around relational binary operators for clarity
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion

# Suggest parentheses around other binary operators for clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:suggestion

# Suggest not having parentheses around other operators (eg. "(a.b).Length")
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion


#-------------------------------------------------------------------------------
#
# Expression-level preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/expression-level-preferences
#

# Suggest object use object initializers when possible
dotnet_style_object_initializer = true:suggestion

# Suggest using collection initializers when possible
dotnet_style_collection_initializer = true:suggestion

# Suggest using auto properties rather than properties with backing fields
dotnet_style_prefer_auto_properties = true:suggestion

# Warn when using Item1 instead of name parts of explicitly named tuples
dotnet_style_explicit_tuple_names = true:warning

# Suggest using inferred tuple member names (age, name) instead of explicit (age: age, name: name)
dotnet_style_prefer_inferred_tuple_names = true:suggestion

# Suggest using inferred anonymous type member names {age, name} instead of explicit {age: age, name: name}
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion

# Suggest using ternary conditional expression over an if/else assignment block
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion

# Suggest using a ternary condition return over an if/else return block
dotnet_style_prefer_conditional_expression_over_return = true:suggestion

# Suggest using compound assignment (x+=1 rather than x=x+1)
dotnet_style_prefer_compound_assignment = true:suggestion

# Suggest using simplified boolean expressions when possible
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion


#-------------------------------------------------------------------------------
#
# Null-checking preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/null-checking-preferences
#

# Suggest using coalesce expression when possible (x ?? y)
dotnet_style_coalesce_expression = true:suggestion

# Suggest using null-conditional (Elvis) operator when possible (o?.ToString())
dotnet_style_null_propagation = true:suggestion

# Suggest using "is null" check over comparing to null
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion


#-------------------------------------------------------------------------------
#
# Unnecessary code rules
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules
#

# Suggest removing unused parameters in all methods (not just private and internal)
dotnet_code_quality_unused_parameters = all:suggestion

# Suggest removing unnecessary suppression exclusions
dotnet_remove_unnecessary_suppression_exclusions = none:suggestion


#-------------------------------------------------------------------------------
#
# Formatting rules
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules
#

# Formatting rules will be applied but violations won't show up in output/messages window
# Note this applies to all formatting rules, so we don't need :silent on every single one
dotnet_diagnostic.IDE0055.severity = silent

# Put system usings prior to non-system usings
dotnet_sort_system_directives_first = true

# Do not put blank lines between usings groups
dotnet_separate_import_directive_groups = false

# Do not require that namespaces match folder structure
# While it is generally preferred to structure this way, it is not universal
dotnet_style_namespace_match_folder = false


#-------------------------------------------------------------------------------
#
# Naming rules
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules
#

# Types and public members must be pascal (public_members_must_be_capitalized)
dotnet_naming_rule.public_members_must_be_capitalized.symbols = public_symbols
dotnet_naming_symbols.public_symbols.applicable_kinds = namespace,class,struct,interface,enum,property,method,field,event,delegate
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public
dotnet_naming_rule.public_members_must_be_capitalized.style = first_word_upper_case_style
dotnet_naming_style.first_word_upper_case_style.capitalization = pascal_case
dotnet_naming_rule.public_members_must_be_capitalized.severity = suggestion

# Private fields must be prefixed with underscore and camel case (private_fields_underscore)
dotnet_naming_rule.private_fields_underscore.symbols = private_fields
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_rule.private_fields_underscore.style = underscore_prefix
dotnet_naming_style.underscore_prefix.capitalization = camel_case
dotnet_naming_style.underscore_prefix.required_prefix = _
dotnet_naming_rule.private_fields_underscore.severity = suggestion

# Async methods must have Async suffix
dotnet_naming_rule.async_methods_must_have_suffix.symbols = async_methods
dotnet_naming_symbols.async_methods.applicable_kinds = method
dotnet_naming_symbols.async_methods.applicable_accessibilities = *
dotnet_naming_symbols.async_methods.required_modifiers = async
dotnet_naming_rule.async_methods_must_have_suffix.style = async_suffix_style
dotnet_naming_style.async_suffix_style.capitalization = pascal_case
dotnet_naming_style.async_suffix_style.required_suffix = Async
dotnet_naming_rule.async_methods_must_have_suffix.severity = suggestion


################################################################################
#
# C# rules
#
[*.cs]

#-------------------------------------------------------------------------------
#
# Modifier preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/modifier-preferences
#

# Suggest a preferred modifier order
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Suggestion local functions be static when possible
csharp_prefer_static_local_function = true:suggestion


#-------------------------------------------------------------------------------
#
# Expression-level preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/expression-level-preferences
#

# Suggest out variables be declared in the argument list rather than before
csharp_style_inlined_variable_declaration = true:suggestion

# Suggest using default instead of default(T)
csharp_prefer_simple_default_expression = true:suggestion

# Take no action on local functions versus anonymous functions
csharp_style_pattern_local_over_anonymous_function = true:none

# Take no action on preferring deconstructed variable declarations
csharp_style_deconstructed_variable_declaration = true:none

# Suggest using target-type new expressions when possible (C c = new())
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion


#-------------------------------------------------------------------------------
#
# Null-checking preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/null-checking-preferences
#

# Suggest using throw expressions rather than throw statements
csharp_style_throw_expression = true:suggestion

# Suggest using the null-condition operator when invoking a delegate when possible
csharp_style_conditional_delegate_call = true:suggestion


#-------------------------------------------------------------------------------
#
# 'var' preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0007-ide0008
#

# Suggest built-in types when possible in place of declaring with var
csharp_style_var_for_built_in_types = false:suggestion

# Suggest var when the type is mentioned on the right-hand side
csharp_style_var_when_type_is_apparent = true:suggestion

# Take no action on var in other cases
csharp_style_var_elsewhere = true:none


#-------------------------------------------------------------------------------
#
# Expression-bodied-members preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/expression-bodied-members
#

# Take no action on express-bodied constructors
csharp_style_expression_bodied_constructors = false:none

# Take no action on expression-bodied methods
csharp_style_expression_bodied_methods = true:none

# Take no action on expression-bodied operators
csharp_style_expression_bodied_operators = false:none

# Suggest expression-bodied properties when possible
csharp_style_expression_bodied_properties = true:suggestion

# Suggest expression-bodied indexers when possible
csharp_style_expression_bodied_indexers = true:suggestion

# Suggest expression-bodied accessors when possible
csharp_style_expression_bodied_accessors = true:suggestion

# Suggest expression-bodied lamdbas when possible
csharp_style_expression_bodied_lambdas = true:suggestion

# Suggest block bodies for local functions
csharp_style_expression_bodied_local_functions = false:suggestion


#-------------------------------------------------------------------------------
#
# Pattern matching preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/pattern-matching-preferences#c-preferences
#

# Suggest pattern matching instead of an as expression with null check (o is string, rather than o as string; o!=null)
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Suggest pattern matching over is with type check followed by cast (o is int i, rather than o is int; var i = (int) o)
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion

# Suggest switch expressions when possible
csharp_style_prefer_switch_expression = true:suggestion

# Suggest using C# 9 pattern matching features when possible
csharp_style_prefer_pattern_matching = true:suggestion

# Suggest using C# 9 not pattern when possible (o is not C c, rather than !(o is C c))
csharp_style_prefer_not_pattern = true:suggestion


#-------------------------------------------------------------------------------
#
# Code block preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/code-block-preferences
#

# Warn when not using braces for code blocks
csharp_prefer_braces = true:warning

# Suggest using C# 8 simple using statements when possible
csharp_prefer_simple_using_statement = true:suggestion


#-------------------------------------------------------------------------------
#
# using directive preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0065
#

# Suggest putting using directives outside the namespace
csharp_using_directive_placement = outside_namespace:suggestion


#-------------------------------------------------------------------------------
#
# Unnecessary code rules
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules
#

# Take no action on using the discard variable (_) when possible in expression statements
csharp_style_unused_value_expression_statement_preference = discard_variable:none

# Take no action on using the discard variable (_) when possible in value assignments
csharp_style_unused_value_assignment_preference = discard_variable:none


#-------------------------------------------------------------------------------
#
# Formatting rules
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules
#

# Require new-lines on methods, properties, accessors, events, local_functions, control_blocks, types
# but not on anonymous_methods, anonymous_types, indexers, lambdas, object_collection_array_initializers
csharp_new_line_before_open_brace = methods, properties, accessors, events, local_functions, control_blocks, types

# Require new-line before else, catch, and finally statements
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true

# Require new-line between each member in an object initializer
csharp_new_line_before_members_in_object_initializers = true

# Require new-line between each member in an anonymous type
csharp_new_line_before_members_in_anonymous_types = true

# Require new-line between each expression in a LINQ query
csharp_new_line_between_query_expression_clauses = true

# Indent statements under a case clause
csharp_indent_case_contents = true

# Indent case statements under a switch statement
csharp_indent_switch_labels = true

# Labels (targets of gotos) should be fully left aligned (column 1) so they stand out
csharp_indent_labels = flush_left

# Block contents should be indented
csharp_indent_block_contents = true

# Open braces should not even with their opening statement, not their contents
csharp_indent_braces = false

# Case content should still be indented even when put inside a { } block
csharp_indent_case_contents_when_block = true


#-------------------------------------------------------------------------------
#
# C# spacing options
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#spacing-options
#

# No space after the closing parenthesis in an explicit type cast
csharp_space_after_cast = false

# Include a space between control flow keyword and opening parenthesis after it
csharp_space_after_keywords_in_control_flow_statements = true

# No space between parentheses and the content inside
csharp_space_between_parentheses = none

# Include a space between a type and the colon after it when it inherits from another type
csharp_space_before_colon_in_inheritance_clause = true

# Include a space after a colon and before the base class and list of interfaces for a type
csharp_space_after_colon_in_inheritance_clause = true

# Include spaces both before and after binary operators (+, *, etc.)
csharp_space_around_binary_operators = before_and_after

# No space between parentheses and list of parameters inside in a method declaration
csharp_space_between_method_declaration_parameter_list_parentheses = false

# No space between parentheses in method declaration with no parameters
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false

# No space between method name and its open parenthesis in method declaration
csharp_space_between_method_declaration_name_and_open_parenthesis = false

# No space between parentheses and parameters inside when calling a method
csharp_space_between_method_call_parameter_list_parentheses = false

# No space between parentheses when calling a method with no parameters
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# No space between method name and its opening parenthesis when calling the method
csharp_space_between_method_call_name_and_opening_parenthesis = false

# Include space after comma in list of items
csharp_space_after_comma = true

# No space before the comma in a list of items
csharp_space_before_comma = false

# No space after the dot between an object and a member on the object
csharp_space_after_dot = false

# No space before the dot between an object and a member on the object
csharp_space_before_dot = false

# Include a space after the semicolons in for statements
csharp_space_after_semicolon_in_for_statement = true

# No space before the semicolons in for statements
csharp_space_before_semicolon_in_for_statement = false

# Remove extra space around variable declarations (which people put in sometimes to line up variable names or equals signs)
csharp_space_around_declaration_statements = false

# No space between a type and the open square bracket when declaring an array
csharp_space_before_open_square_brackets = false

# No space between square brackets with no content when declaring an array
csharp_space_between_empty_square_brackets = false

# No space between square brackets and the indexers inside
csharp_space_between_square_brackets = false


#-------------------------------------------------------------------------------
#
# C# wrap options
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#wrap-options
#

# Allow multiple statements to stay on a single line
csharp_preserve_single_line_statements = true

# Allow single-line code blocks
csharp_preserve_single_line_blocks = true


#-------------------------------------------------------------------------------
#
# C# namespace options
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#namespace-options
#

# Put contents of a namespace inside a block within the namespace
csharp_style_namespace_declarations = block_scoped


################################################################################
#
# VB rules
#
[*.vb]

#-------------------------------------------------------------------------------
#
# Modifier preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/modifier-preferences
#

# Suggest a preferred modifier order
visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:suggestion


#-------------------------------------------------------------------------------
#
# Pattern matching preferences
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/pattern-matching-preferences#visual-basic-preferences
#

# Suggest using IsNot pattern when possible
visual_basic_style_prefer_isnot_expression = true:suggestion


#-------------------------------------------------------------------------------
#
# Unnecessary code rules
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules
#

# Suggest simplified object creation form when possible
visual_basic_style_prefer_simplified_object_creation = true:suggestion
